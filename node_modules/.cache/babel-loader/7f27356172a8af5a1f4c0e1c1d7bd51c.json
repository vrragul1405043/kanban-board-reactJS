{"ast":null,"code":"var _jsxFileName = \"/Users/ragulravisankar/Desktop/kanban-board-react/src/components/Board/Board.js\";\nimport React, { useState, useEffect, useReducer, createContext } from \"react\";\nimport NewTask from \"./New Task/NewTask\";\nimport BoardLanes from \"./BoardLanes\";\nimport \"./Board.css\";\nimport { Button } from \"react-bootstrap\";\nimport * as CONSTANTS from \"./BoardConstants\";\nexport const BoardContext = createContext({});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case CONSTANTS.ON_DROP:\n      const droppedTask = action.payload;\n      const updatedTasks = state.map(task => {\n        if (task.id === droppedTask.id) {\n          return droppedTask;\n        }\n\n        return task;\n      });\n      return updatedTasks;\n\n    case CONSTANTS.LOAD_DATA:\n      return action.payload;\n\n    case CONSTANTS.ADD_NEW:\n      return [...state, action.payload];\n\n    case CONSTANTS.ON_DELETE:\n      return state.filter(task => task.id !== action.payload);\n\n    default:\n      return state;\n  }\n}\n\nfunction Board(props) {\n  const [stages, setStage] = useState(CONSTANTS.stagesData);\n  const [taskState, dispatch] = useReducer(reducer, props.data.task);\n  const initialData = props.data;\n  useEffect(() => {\n    dispatch({\n      type: CONSTANTS.LOAD_DATA,\n      payload: taskState\n    });\n  }, [taskState, stages]);\n\n  const onDragStartHandler = (event, taskId, stageId) => {\n    var data = {\n      taskId: taskId,\n      stageId: stageId\n    };\n    event.dataTransfer.setData(\"text/plain\", JSON.stringify(data));\n    event.dataTransfer.effectAllowed = CONSTANTS.MOVE;\n  };\n\n  const onTaskContainerDragStartHandler = (event, laneId) => {\n    console.log('onTaskContainerDragStartHandler');\n    let fromBox = JSON.stringify({\n      laneId: laneId\n    });\n    event.dataTransfer.setData(\"laneId\", fromBox);\n  };\n\n  const onTaskContainerDragOverHandler = event => {\n    console.log('onTaskContainerDragOverHandler');\n\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault();\n    }\n  };\n\n  const onTaskContainerDropHandler = (event, droppedLaneId) => {\n    console.log('onTaskContainerDropHandler');\n  };\n\n  const onDragOverHandler = event => {\n    console.log('onDragOverHandler');\n\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault();\n    } // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.description && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n\n  };\n\n  const onDropHandler = (event, droppedStageId) => {\n    console.log('onDropHandler');\n    console.log(event);\n    console.log(droppedStageId);\n    let droppedData = event.dataTransfer.getData(\"text/plain\");\n    droppedData = JSON.parse(droppedData);\n    console.log(droppedData);\n    const filterTask = taskState.filter(x => x.id === droppedData.taskId);\n    filterTask[0].stage = droppedStageId;\n    dispatch({\n      type: CONSTANTS.ON_DROP,\n      payload: filterTask[0]\n    }); // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onAddingNewTask = dataFromChild => {\n    dataFromChild.stage = 1;\n    dataFromChild.id = taskState.length + 1;\n    dispatch({\n      type: CONSTANTS.ADD_NEW,\n      payload: dataFromChild\n    }); // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onUpdatingTask = dataFromChild => {\n    console.log(dataFromChild);\n    dispatch({\n      type: CONSTANTS.ON_DROP,\n      payload: dataFromChild\n    }); // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onDeletingTask = taskId => {\n    dispatch({\n      type: CONSTANTS.ON_DELETE,\n      payload: taskId\n    });\n  };\n\n  const onSubmitTask = tasks => {\n    tasks.task = taskState;\n    const response = fetch(CONSTANTS.SUBMIT_URL, {\n      method: CONSTANTS.POST,\n      headers: {\n        'Content-Type': CONSTANTS.APPLICATION_JSON\n      },\n      body: JSON.stringify(tasks)\n    });\n  };\n\n  const ContextData = {\n    taskState,\n    onDragStartHandler,\n    onDragOverHandler,\n    onDropHandler,\n    onUpdatingTask,\n    onDeletingTask,\n    onTaskContainerDragStartHandler,\n    onTaskContainerDropHandler,\n    onTaskContainerDragOverHandler\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid pt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NewTask, {\n    addNewTask: onAddingNewTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-custom\",\n    onClick: () => onSubmitTask(initialData),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"Submit\"))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BoardContext.Provider, {\n    value: ContextData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(BoardLanes, {\n    stages: stages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  })))));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/ragulravisankar/Desktop/kanban-board-react/src/components/Board/Board.js"],"names":["React","useState","useEffect","useReducer","createContext","NewTask","BoardLanes","Button","CONSTANTS","BoardContext","reducer","state","action","type","ON_DROP","droppedTask","payload","updatedTasks","map","task","id","LOAD_DATA","ADD_NEW","ON_DELETE","filter","Board","props","stages","setStage","stagesData","taskState","dispatch","data","initialData","onDragStartHandler","event","taskId","stageId","dataTransfer","setData","JSON","stringify","effectAllowed","MOVE","onTaskContainerDragStartHandler","laneId","console","log","fromBox","onTaskContainerDragOverHandler","types","preventDefault","onTaskContainerDropHandler","droppedLaneId","onDragOverHandler","onDropHandler","droppedStageId","droppedData","getData","parse","filterTask","x","stage","onAddingNewTask","dataFromChild","length","onUpdatingTask","onDeletingTask","onSubmitTask","tasks","response","fetch","SUBMIT_URL","method","POST","headers","APPLICATION_JSON","body","ContextData"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, createContext } from \"react\";\nimport NewTask from \"./New Task/NewTask\";\nimport BoardLanes from \"./BoardLanes\";\nimport \"./Board.css\";\nimport { Button } from \"react-bootstrap\";\nimport * as CONSTANTS from \"./BoardConstants\"\n\n\nexport const BoardContext = createContext({});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case CONSTANTS.ON_DROP:\n      const droppedTask = action.payload;\n      const updatedTasks = state.map((task) => {\n        if (task.id === droppedTask.id) {\n          return droppedTask;\n        }\n        return task;\n      });\n      return updatedTasks;\n    case CONSTANTS.LOAD_DATA:\n      return action.payload;\n    case CONSTANTS.ADD_NEW:\n      return [...state, action.payload];\n    case CONSTANTS.ON_DELETE:\n      return state.filter((task) => task.id !== action.payload);\n    default:\n      return state;\n  }\n}\nfunction Board(props) {\n  const [stages, setStage] = useState(CONSTANTS.stagesData);\n  const [taskState, dispatch] = useReducer(reducer, props.data.task);\n  const initialData = props.data;\n  \n  useEffect(() => {\n    dispatch({ type: CONSTANTS.LOAD_DATA, payload: taskState });\n  }, [taskState, stages]);\n\n  const onDragStartHandler = (\n    event,\n    taskId,\n    stageId\n  ) => {\n    var data = {\n      taskId: taskId,\n      stageId: stageId,\n    };\n    event.dataTransfer.setData(\"text/plain\", JSON.stringify(data));\n    event.dataTransfer.effectAllowed = CONSTANTS.MOVE;\n  };\n\n  const onTaskContainerDragStartHandler = (event,laneId) => {\n    console.log('onTaskContainerDragStartHandler')\n    let fromBox = JSON.stringify({ laneId: laneId });\n    event.dataTransfer.setData(\"laneId\", fromBox);\n  };\n  const onTaskContainerDragOverHandler = (event) => {\n    console.log('onTaskContainerDragOverHandler')\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault();\n    }\n  };\n\n  const onTaskContainerDropHandler = (event, droppedLaneId) => {\n    console.log('onTaskContainerDropHandler')\n  };\n  \n\n  const onDragOverHandler = (event) => {\n    console.log('onDragOverHandler')\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault();\n    }\n    // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.description && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onDropHandler = (event, droppedStageId) => {\n    console.log('onDropHandler')\n    console.log(event);\n    console.log(droppedStageId)\n    let droppedData = event.dataTransfer.getData(\"text/plain\");\n    droppedData = JSON.parse(droppedData);\n    console.log(droppedData)\n    const filterTask = taskState.filter((x) => x.id === droppedData.taskId);\n    filterTask[0].stage = droppedStageId;\n    dispatch({ type: CONSTANTS.ON_DROP, payload: filterTask[0] });\n    // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onAddingNewTask = (dataFromChild) => {\n    dataFromChild.stage = 1;\n    dataFromChild.id = taskState.length + 1;\n    dispatch({ type: CONSTANTS.ADD_NEW, payload: dataFromChild });\n    // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onUpdatingTask = (dataFromChild) => {\n    console.log(dataFromChild)\n    dispatch({ type: CONSTANTS.ON_DROP, payload: dataFromChild });\n    // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onDeletingTask = (taskId) => {\n    dispatch({ type: CONSTANTS.ON_DELETE, payload: taskId });\n  };\n\n  const onSubmitTask = (tasks) =>{\n    tasks.task = taskState\n    const response = fetch(CONSTANTS.SUBMIT_URL, {\n      method: CONSTANTS.POST,\n      headers: {\n      'Content-Type' : CONSTANTS.APPLICATION_JSON\n      },\n      body: JSON.stringify(tasks)\n      })\n  };\n\n  const ContextData = {\n    taskState,\n    onDragStartHandler,\n    onDragOverHandler,\n    onDropHandler,\n    onUpdatingTask,\n    onDeletingTask,\n    onTaskContainerDragStartHandler,\n    onTaskContainerDropHandler,\n    onTaskContainerDragOverHandler\n  };\n\n  return (\n    <div className=\"container-fluid pt-3\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <NewTask addNewTask={onAddingNewTask}/>\n          <Button className=\"btn-custom\" onClick={()=>onSubmitTask(initialData)}>\n            Submit\n          </Button>\n        </div>\n      </div>\n      <hr />\n      <div className=\"row\">\n        <div className=\"col-12\">\n            <BoardContext.Provider value={ContextData}>\n                <BoardLanes stages={stages}></BoardLanes>\n            </BoardContext.Provider>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}