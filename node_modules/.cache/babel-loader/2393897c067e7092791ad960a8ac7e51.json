{"ast":null,"code":"var _jsxFileName = \"/Users/ragulravisankar/Desktop/kanban-board-react/src/components/Board/New Task/TaskForm.js\";\nimport React from \"react\";\nimport { Button, Modal, FormGroup, FormLabel } from \"react-bootstrap\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"./NewTask.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nconst validationSchema = Yup.object().shape({\n  title: Yup.string().required(\"Title is required\"),\n  description: Yup.string() // startDate: Yup.date().nullable().required(\"Start Date is required\"),\n  //endDate: Yup.date().nullable().required(\"End Date is required\"),\n  // endDate: Yup.date()\n  // .when(\n  //   \"startDate\",\n  //   (startDate, schema) =>\n  //     startDate &&\n  //     schema.min(startDate, \"End date must be after the start date.\")\n  // )\n  // .nullable()\n  // .required(\"End Date is required\"),\n\n});\n\nfunction TaskForm(props) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: props.editedValues || props.initialValues,\n    validationSchema: validationSchema,\n    onSubmit: props.onSubmit,\n    enableReinitialize: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, formik => {\n    return /*#__PURE__*/React.createElement(Modal, {\n      show: props.show,\n      onHide: props.handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }, props.taskState, \" Task\")), /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }\n    }, \"Title\"), /*#__PURE__*/React.createElement(Field, {\n      type: \"text\",\n      id: \"title\",\n      name: \"title\",\n      className: `form-control ${formik.touched.title && formik.errors.title ? \"is-invalid\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      component: \"div\",\n      name: \"title\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(Field, {\n      type: \"text\",\n      id: \"description\",\n      name: \"description\",\n      className: `form-control ${formik.touched.description && formik.errors.description ? \"is-invalid\" : \"\"}`,\n      as: \"textarea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      component: \"div\",\n      name: \"description\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: props.handleClose,\n      type: \"reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 19\n      }\n    }, \"Close\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 19\n      }\n    }, \"Save Changes\"))));\n  }));\n}\n\nexport default TaskForm;","map":{"version":3,"sources":["/Users/ragulravisankar/Desktop/kanban-board-react/src/components/Board/New Task/TaskForm.js"],"names":["React","Button","Modal","FormGroup","FormLabel","Formik","Form","Field","ErrorMessage","Yup","DatePicker","validationSchema","object","shape","title","string","required","description","TaskForm","props","editedValues","initialValues","onSubmit","formik","show","handleClose","taskState","touched","errors"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Modal, FormGroup, FormLabel } from \"react-bootstrap\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"./NewTask.css\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst validationSchema = Yup.object().shape({\n  title: Yup.string().required(\"Title is required\"),\n  description: Yup.string()\n  // startDate: Yup.date().nullable().required(\"Start Date is required\"),\n  //endDate: Yup.date().nullable().required(\"End Date is required\"),\n  // endDate: Yup.date()\n    // .when(\n    //   \"startDate\",\n    //   (startDate, schema) =>\n    //     startDate &&\n    //     schema.min(startDate, \"End date must be after the start date.\")\n    // )\n    // .nullable()\n    // .required(\"End Date is required\"),\n});\n\nfunction TaskForm(props) {\n  return (\n    <>\n\n      <Formik\n        initialValues={props.editedValues|| props.initialValues}\n        validationSchema={validationSchema}\n        onSubmit={props.onSubmit}\n        enableReinitialize\n      >\n        {(formik) => {\n          return (\n            <Modal show={props.show} onHide={props.handleClose}>\n              <Modal.Header closeButton>\n          <Modal.Title>{props.taskState} Task</Modal.Title>\n              </Modal.Header>\n              <Form>\n                <Modal.Body>\n                  <FormGroup>\n                    <FormLabel>Title</FormLabel>\n                    <Field\n                      type=\"text\"\n                      id=\"title\"\n                      name=\"title\"\n                      className={`form-control ${\n                        formik.touched.title && formik.errors.title\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                    />\n                    <ErrorMessage\n                      component=\"div\"\n                      name=\"title\"\n                      className=\"invalid-feedback\"\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <FormLabel>Description</FormLabel>\n                    <Field\n                      type=\"text\"\n                      id=\"description\"\n                      name=\"description\"\n                      className={`form-control ${\n                        formik.touched.description && formik.errors.description\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                      as=\"textarea\"\n                    />\n                    <ErrorMessage\n                      component=\"div\"\n                      name=\"description\"\n                      className=\"invalid-feedback\"\n                    />\n                  </FormGroup>\n                  {/* <FormGroup>\n                    <FormLabel>Start Date</FormLabel>\n\n                    <DatePicker\n                      selected={formik.values.startDate}\n                      name=\"startDate\"\n                      id=\"startDate\"\n                      onBlur={formik.handleBlur}\n                      onChange={(date) =>\n                        formik.setFieldValue(\"startDate\", date)\n                      }\n                      className={`form-control ${\n                        formik.touched.startDate && formik.errors.startDate\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                    />\n                    <ErrorMessage\n                      component=\"div\"\n                      name=\"startDate\"\n                      className=\"invalid-feedback\"\n                    />\n                  </FormGroup> */}\n                  {/* <FormGroup>\n                    <FormLabel>End Date</FormLabel>\n                    <DatePicker\n                      selected={formik.values.endDate}\n                      name=\"endDate\"\n                      onBlur={formik.handleBlur}\n                      onChange={(date) => formik.setFieldValue(\"endDate\", date)}\n                      className={`form-control ${\n                        formik.touched.endDate && formik.errors.endDate\n                          ? \"is-invalid\"\n                          : \"\"\n                      }`}\n                    />\n                    <ErrorMessage\n                      component=\"div\"\n                      name=\"endDate\"\n                      className=\"invalid-feedback\"\n                    />\n                  </FormGroup> */}\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={props.handleClose}\n                    type=\"reset\"\n                  >\n                    Close\n                  </Button>\n                  <Button variant=\"primary\" type=\"submit\">\n                    Save Changes\n                  </Button>\n                </Modal.Footer>\n              </Form>\n            </Modal>\n          );\n        }}\n      </Formik>\n    </>\n  );\n}\n\nexport default TaskForm;\n"]},"metadata":{},"sourceType":"module"}