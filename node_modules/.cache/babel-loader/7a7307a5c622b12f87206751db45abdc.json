{"ast":null,"code":"var _jsxFileName = \"/Users/ragulravisankar/Desktop/kanban-board-react/src/components/Board/Board.js\";\nimport React, { useState, useEffect, useReducer, createContext } from \"react\";\nimport NewTask from \"./New Task/NewTask\";\nimport BoardLanes from \"./BoardLanes\";\nimport \"./Board.css\";\nimport { Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nexport const BoardContext = createContext({});\nconst stagesData = [{\n  name: \"TODO\",\n  id: 1\n}, {\n  name: \"In Progress\",\n  id: 2\n}, {\n  name: \"Review\",\n  id: 3\n}, {\n  name: \"Completed\",\n  id: 4\n}];\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"ON_DROP\":\n      const droppedTask = action.payload;\n      const updatedTasks = state.map(task => {\n        if (task.id === droppedTask.id) {\n          return droppedTask;\n        }\n\n        return task;\n      });\n      return updatedTasks;\n\n    case \"LOAD_DATA\":\n      console.log(\"State\");\n      console.log(state);\n      return action.payload;\n\n    case \"ADD_NEW\":\n      return [...state, action.payload];\n\n    case \"ON_DELETE\":\n      return state.filter(task => task.id !== action.payload);\n\n    default:\n      return state;\n  }\n}\n\nfunction Board(props) {\n  // if(props.taskData==null)return (<div>Empty!</div>);\n  // const req = {\"id\":\"1\",\"task\":taskData}\n  // const myJSON = JSON.stringify(req);\n  // taskData = {}\n  // useEffect(() => {\n  //   axios.get('https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod').then(res => {\n  //     console.log(res);\n  //   })\n  //   .then(error => console.log(error));\n  // }, []);\n  // useEffect(() =>{\n  //   axios({\n  //     method: \"post\",\n  //     url: \"https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod/board\",\n  //     data: myJSON,\n  //     headers: { \"Content-Type\": \"application/json\"},\n  //   })\n  //     .then(function (response) {\n  //       console.log(response);\n  //     })\n  //     .catch(function (response) {\n  //       console.log(response);\n  //     });\n  // },[]);\n  // useEffect(() => {\n  // }, [taskState, stages]);\n  // const response = fetch(\"https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod/board\", {\n  //   method: \"POST\",\n  //   headers: {\n  //   'Content-Type' : 'application/json'\n  //   },\n  //   body: myJSON\n  //   })\n  //   if (response.ok){\n  //     console.log(response)\n  //     console.log(\"it worked\")\n  //   }\n  //   else{\n  //     console.log(response)\n  //   }\n  // const [initialTaskState, setInitialTaskState] = useState(props.data.task);\n  // const [taskState, dispatch] = useReducer(reducer, props.data.task);\n  const [initialTaskState, setInitialTaskState] = useState(props.data);\n  const [taskState, dispatch] = useReducer(reducer, props.data);\n  const [isNew, setIsNew] = useState(false);\n  const initialData = props.data;\n  const [stages, setStage] = useState(stagesData);\n  useEffect(() => {\n    dispatch({\n      type: \"LOAD_DATA\",\n      payload: taskState\n    });\n  }, [taskState, stages]);\n\n  const onDragStartHandler = (event, taskId, stageId) => {\n    var data = {\n      taskId: taskId,\n      stageId: stageId\n    };\n    event.dataTransfer.setData(\"text/plain\", JSON.stringify(data));\n    event.dataTransfer.effectAllowed = \"move\";\n  };\n\n  const onTaskContainerDragStartHandler = (event, laneId) => {\n    console.log('onTaskContainerDragStartHandler');\n    let fromBox = JSON.stringify({\n      laneId: laneId\n    });\n    event.dataTransfer.setData(\"laneId\", fromBox);\n  };\n\n  const onTaskContainerDragOverHandler = event => {\n    console.log('onTaskContainerDragOverHandler');\n\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault();\n    }\n  };\n\n  const onTaskContainerDropHandler = (event, droppedLaneId) => {\n    console.log('onTaskContainerDropHandler');\n  };\n\n  const onDragOverHandler = event => {\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault();\n    } // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.description && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n\n  };\n\n  const onDropHandler = (event, droppedStageId) => {\n    console.log(event);\n    console.log(droppedStageId);\n    let droppedData = event.dataTransfer.getData(\"text/plain\");\n    droppedData = JSON.parse(droppedData);\n    console.log(droppedData);\n    const filterTask = taskState.filter(x => x.id === droppedData.taskId);\n    filterTask[0].stage = droppedStageId;\n    dispatch({\n      type: \"ON_DROP\",\n      payload: filterTask[0]\n    }); // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onAddingNewTask = dataFromChild => {\n    dataFromChild.stage = 1;\n    dataFromChild.id = taskState.length + 1;\n    dispatch({\n      type: \"ADD_NEW\",\n      payload: dataFromChild\n    }); // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onUpdatingTask = dataFromChild => {\n    console.log(dataFromChild);\n    dispatch({\n      type: \"ON_DROP\",\n      payload: dataFromChild\n    }); // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onDeletingTask = taskId => {\n    dispatch({\n      type: \"ON_DELETE\",\n      payload: taskId\n    });\n  };\n\n  const onSubmitTask = tasks => {\n    tasks.task = taskState;\n    const response = fetch(\"https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod/board\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(tasks)\n    });\n    console.log(response);\n  };\n\n  const ContextData = {\n    taskState,\n    onDragStartHandler,\n    onDragOverHandler,\n    onDropHandler,\n    onUpdatingTask,\n    onDeletingTask,\n    onTaskContainerDragStartHandler,\n    onTaskContainerDropHandler,\n    onTaskContainerDragOverHandler,\n    onSubmitTask\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid pt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NewTask, {\n    addNewTask: onAddingNewTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-custom\",\n    onClick: () => onSubmitTask(initialData),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, \"Submit\"))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BoardContext.Provider, {\n    value: ContextData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(BoardLanes, {\n    stages: stages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }\n  })))));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/ragulravisankar/Desktop/kanban-board-react/src/components/Board/Board.js"],"names":["React","useState","useEffect","useReducer","createContext","NewTask","BoardLanes","Button","axios","BoardContext","stagesData","name","id","reducer","state","action","type","droppedTask","payload","updatedTasks","map","task","console","log","filter","Board","props","initialTaskState","setInitialTaskState","data","taskState","dispatch","isNew","setIsNew","initialData","stages","setStage","onDragStartHandler","event","taskId","stageId","dataTransfer","setData","JSON","stringify","effectAllowed","onTaskContainerDragStartHandler","laneId","fromBox","onTaskContainerDragOverHandler","types","preventDefault","onTaskContainerDropHandler","droppedLaneId","onDragOverHandler","onDropHandler","droppedStageId","droppedData","getData","parse","filterTask","x","stage","onAddingNewTask","dataFromChild","length","onUpdatingTask","onDeletingTask","onSubmitTask","tasks","response","fetch","method","headers","body","ContextData"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, createContext } from \"react\";\nimport NewTask from \"./New Task/NewTask\";\nimport BoardLanes from \"./BoardLanes\";\nimport \"./Board.css\";\nimport { Button } from \"react-bootstrap\";\nimport axios from \"axios\";\n\n\nexport const BoardContext = createContext({});\n\nconst stagesData = [\n  { name: \"TODO\", id: 1 },\n  { name: \"In Progress\", id: 2 },\n  { name: \"Review\", id: 3 },\n  { name: \"Completed\", id: 4 },\n];\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"ON_DROP\":\n      const droppedTask = action.payload;\n      const updatedTasks = state.map((task) => {\n        if (task.id === droppedTask.id) {\n          return droppedTask;\n        }\n        return task;\n      });\n      return updatedTasks;\n    case \"LOAD_DATA\":\n      console.log(\"State\")\n      console.log(state)\n      return action.payload;\n    case \"ADD_NEW\":\n      return [...state, action.payload];\n    case \"ON_DELETE\":\n      return state.filter((task) => task.id !== action.payload);\n    default:\n      return state;\n  }\n}\nfunction Board(props) {\n  // if(props.taskData==null)return (<div>Empty!</div>);\n  // const req = {\"id\":\"1\",\"task\":taskData}\n  // const myJSON = JSON.stringify(req);\n  // taskData = {}\n  // useEffect(() => {\n  //   axios.get('https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod').then(res => {\n  //     console.log(res);\n  //   })\n  //   .then(error => console.log(error));\n  // }, []);\n  \n  // useEffect(() =>{\n  //   axios({\n  //     method: \"post\",\n  //     url: \"https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod/board\",\n  //     data: myJSON,\n  //     headers: { \"Content-Type\": \"application/json\"},\n  //   })\n  //     .then(function (response) {\n  //       console.log(response);\n  //     })\n  //     .catch(function (response) {\n  //       console.log(response);\n  //     });\n  // },[]);\n\n  // useEffect(() => {\n    \n  // }, [taskState, stages]);\n\n  // const response = fetch(\"https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod/board\", {\n  //   method: \"POST\",\n  //   headers: {\n  //   'Content-Type' : 'application/json'\n  //   },\n  //   body: myJSON\n  //   })\n  //   if (response.ok){\n  //     console.log(response)\n  //     console.log(\"it worked\")\n  //   }\n  //   else{\n  //     console.log(response)\n  //   }\n\n  // const [initialTaskState, setInitialTaskState] = useState(props.data.task);\n  // const [taskState, dispatch] = useReducer(reducer, props.data.task);\n  const [initialTaskState, setInitialTaskState] = useState(props.data);\n  const [taskState, dispatch] = useReducer(reducer, props.data);\n  const [isNew, setIsNew] = useState(false);\n  const initialData = props.data;\n  const [stages, setStage] = useState(stagesData);\n\n  useEffect(() => {\n    dispatch({ type: \"LOAD_DATA\", payload: taskState });\n  }, [taskState, stages]);\n\n  const onDragStartHandler = (\n    event,\n    taskId,\n    stageId\n  ) => {\n    var data = {\n      taskId: taskId,\n      stageId: stageId,\n    };\n    event.dataTransfer.setData(\"text/plain\", JSON.stringify(data));\n    event.dataTransfer.effectAllowed = \"move\";\n  };\n\n  const onTaskContainerDragStartHandler = (event,laneId) => {\n    console.log('onTaskContainerDragStartHandler')\n    let fromBox = JSON.stringify({ laneId: laneId });\n    event.dataTransfer.setData(\"laneId\", fromBox);\n  };\n  const onTaskContainerDragOverHandler = (event) => {\n    console.log('onTaskContainerDragOverHandler')\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault();\n    }\n  };\n\n  const onTaskContainerDropHandler = (event, droppedLaneId) => {\n    console.log('onTaskContainerDropHandler')\n  };\n  \n\n  const onDragOverHandler = (event) => {\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault();\n    }\n    // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.description && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onDropHandler = (event, droppedStageId) => {\n    console.log(event);\n    console.log(droppedStageId)\n    let droppedData = event.dataTransfer.getData(\"text/plain\");\n    droppedData = JSON.parse(droppedData);\n    console.log(droppedData)\n    const filterTask = taskState.filter((x) => x.id === droppedData.taskId);\n    filterTask[0].stage = droppedStageId;\n    dispatch({ type: \"ON_DROP\", payload: filterTask[0] });\n    // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onAddingNewTask = (dataFromChild) => {\n    dataFromChild.stage = 1;\n    dataFromChild.id = taskState.length + 1;\n    dispatch({ type: \"ADD_NEW\", payload: dataFromChild });\n    // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onUpdatingTask = (dataFromChild) => {\n    console.log(dataFromChild)\n    dispatch({ type: \"ON_DROP\", payload: dataFromChild });\n    // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onDeletingTask = (taskId) => {\n    dispatch({ type: \"ON_DELETE\", payload: taskId });\n  };\n\n  const onSubmitTask = (tasks) =>{\n    tasks.task = taskState\n    const response = fetch(\"https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod/board\", {\n      method: \"POST\",\n      headers: {\n      'Content-Type' : 'application/json'\n      },\n      body: JSON.stringify(tasks)\n      })\n      console.log(response);\n  };\n\n  const ContextData = {\n    taskState,\n    onDragStartHandler,\n    onDragOverHandler,\n    onDropHandler,\n    onUpdatingTask,\n    onDeletingTask,\n    onTaskContainerDragStartHandler,\n    onTaskContainerDropHandler,\n    onTaskContainerDragOverHandler,\n    onSubmitTask\n  };\n\n  return (\n    <div className=\"container-fluid pt-3\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <NewTask addNewTask={onAddingNewTask}/>\n          <Button className=\"btn-custom\" onClick={()=>onSubmitTask(initialData)}>\n            Submit\n          </Button>\n        </div>\n      </div>\n      <hr />\n      <div className=\"row\">\n        <div className=\"col-12\">\n            <BoardContext.Provider value={ContextData}>\n                <BoardLanes stages={stages}></BoardLanes>\n            </BoardContext.Provider>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}