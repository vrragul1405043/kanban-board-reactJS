{"ast":null,"code":"var _jsxFileName = \"/Users/ragulravisankar/Desktop/kanban-board-react/src/components/Board/Board.js\";\nimport React, { useState, useEffect, useReducer, createContext } from \"react\";\nimport NewTask from \"./New Task/NewTask\";\nimport BoardLanes from \"./BoardLanes\";\nimport \"./Board.css\";\nimport { Button } from \"react-bootstrap\";\nimport * as BOARD_CONSTANTS from \"./BoardConstants\";\nexport const BoardContext = createContext({});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case BOARD_CONSTANTS.ON_DROP:\n      const droppedTask = action.payload;\n      const updatedTasks = state.map(task => {\n        if (task.id === droppedTask.id) {\n          return droppedTask;\n        }\n\n        return task;\n      });\n      return updatedTasks;\n\n    case BOARD_CONSTANTS.LOAD_DATA:\n      return action.payload;\n\n    case BOARD_CONSTANTS.ADD_NEW:\n      return [...state, action.payload];\n\n    case BOARD_CONSTANTS.ON_DELETE:\n      return state.filter(task => task.id !== action.payload);\n\n    default:\n      return state;\n  }\n}\n\nfunction Board(props) {\n  // if(props.taskData==null)return (<div>Empty!</div>);\n  // const req = {\"id\":\"1\",\"task\":taskData}\n  // const myJSON = JSON.stringify(req);\n  // taskData = {}\n  // useEffect(() => {\n  //   axios.get('https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod').then(res => {\n  //     console.log(res);\n  //   })\n  //   .then(error => console.log(error));\n  // }, []);\n  // useEffect(() =>{\n  //   axios({\n  //     method: \"post\",\n  //     url: \"https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod/board\",\n  //     data: myJSON,\n  //     headers: { \"Content-Type\": \"application/json\"},\n  //   })\n  //     .then(function (response) {\n  //       console.log(response);\n  //     })\n  //     .catch(function (response) {\n  //       console.log(response);\n  //     });\n  // },[]);\n  // useEffect(() => {\n  // }, [taskState, stages]);\n  // const response = fetch(\"https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod/board\", {\n  //   method: \"POST\",\n  //   headers: {\n  //   'Content-Type' : 'application/json'\n  //   },\n  //   body: myJSON\n  //   })\n  //   if (response.ok){\n  //     console.log(response)\n  //     console.log(\"it worked\")\n  //   }\n  //   else{\n  //     console.log(response)\n  //   }\n  const [taskState, dispatch] = useReducer(reducer, props.data.task);\n  const initialData = props.data;\n  const [stages, setStage] = useState(stagesData);\n  useEffect(() => {\n    dispatch({\n      type: BOARD_CONSTANTS.LOAD_DATA,\n      payload: taskState\n    });\n  }, [taskState, stages]);\n\n  const onDragStartHandler = (event, taskId, stageId) => {\n    var data = {\n      taskId: taskId,\n      stageId: stageId\n    };\n    event.dataTransfer.setData(BOARD_CONSTANTS.TEXT_PLAIN, JSON.stringify(data));\n    event.dataTransfer.effectAllowed = BOARD_CONSTANTS.MOVE;\n  };\n\n  const onTaskContainerDragStartHandler = (event, laneId) => {\n    let fromBox = JSON.stringify({\n      laneId: laneId\n    });\n    event.dataTransfer.setData(BOARD_CONSTANTS.LANE_ID, fromBox);\n  };\n\n  const onTaskContainerDragOverHandler = event => {\n    if (event.dataTransfer && event.dataTransfer.types[0] === BOARD_CONSTANTS.TEXT_PLAIN) {\n      event.preventDefault();\n    }\n  };\n\n  const onTaskContainerDropHandler = (event, droppedLaneId) => {};\n\n  const onDragOverHandler = event => {\n    if (event.dataTransfer && event.dataTransfer.types[0] === BOARD_CONSTANTS.TEXT_PLAIN) {\n      event.preventDefault(); //To allow a drop, we must prevent the default handling of the element\n    } // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.description && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n\n  };\n\n  const onDropHandler = (event, droppedStageId) => {\n    let droppedData = event.dataTransfer.getData(BOARD_CONSTANTS.TEXT_PLAIN);\n    droppedData = JSON.parse(droppedData);\n    const filterTask = taskState.filter(x => x.id === droppedData.taskId);\n    filterTask[0].stage = droppedStageId;\n    dispatch({\n      type: BOARD_CONSTANTS.ON_DROP,\n      payload: filterTask[0]\n    }); // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onAddingNewTask = dataFromChild => {\n    dataFromChild.stage = 1;\n    dataFromChild.id = taskState.length + 1;\n    dispatch({\n      type: BOARD_CONSTANTS.ADD_NEW,\n      payload: dataFromChild\n    }); // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onUpdatingTask = dataFromChild => {\n    console.log(dataFromChild);\n    dispatch({\n      type: BOARD_CONSTANTS.ON_DROP,\n      payload: dataFromChild\n    }); // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onDeletingTask = taskId => {\n    dispatch({\n      type: BOARD_CONSTANTS.ON_DELETE,\n      payload: taskId\n    });\n  };\n\n  const onSubmitTask = tasks => {\n    tasks.task = taskState;\n    const response = fetch(BOARD_CONSTANTS.SUBMIT_URL, {\n      method: BOARD_CONSTANTS.POST,\n      headers: {\n        'Content-Type': BOARD_CONSTANTS.APPLICATION_JSON\n      },\n      body: JSON.stringify(tasks)\n    });\n  };\n\n  const ContextData = {\n    taskState,\n    onDragStartHandler,\n    onDragOverHandler,\n    onDropHandler,\n    onUpdatingTask,\n    onDeletingTask,\n    onTaskContainerDragStartHandler,\n    onTaskContainerDropHandler,\n    onTaskContainerDragOverHandler,\n    onSubmitTask\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid pt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NewTask, {\n    addNewTask: onAddingNewTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-custom\",\n    onClick: () => onSubmitTask(initialData),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, \"Submit\"))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BoardContext.Provider, {\n    value: ContextData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(BoardLanes, {\n    stages: stages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  })))));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/ragulravisankar/Desktop/kanban-board-react/src/components/Board/Board.js"],"names":["React","useState","useEffect","useReducer","createContext","NewTask","BoardLanes","Button","BOARD_CONSTANTS","BoardContext","reducer","state","action","type","ON_DROP","droppedTask","payload","updatedTasks","map","task","id","LOAD_DATA","ADD_NEW","ON_DELETE","filter","Board","props","taskState","dispatch","data","initialData","stages","setStage","stagesData","onDragStartHandler","event","taskId","stageId","dataTransfer","setData","TEXT_PLAIN","JSON","stringify","effectAllowed","MOVE","onTaskContainerDragStartHandler","laneId","fromBox","LANE_ID","onTaskContainerDragOverHandler","types","preventDefault","onTaskContainerDropHandler","droppedLaneId","onDragOverHandler","onDropHandler","droppedStageId","droppedData","getData","parse","filterTask","x","stage","onAddingNewTask","dataFromChild","length","onUpdatingTask","console","log","onDeletingTask","onSubmitTask","tasks","response","fetch","SUBMIT_URL","method","POST","headers","APPLICATION_JSON","body","ContextData"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, createContext } from \"react\";\nimport NewTask from \"./New Task/NewTask\";\nimport BoardLanes from \"./BoardLanes\";\nimport \"./Board.css\";\nimport { Button } from \"react-bootstrap\";\nimport * as BOARD_CONSTANTS from \"./BoardConstants\"\n\nexport const BoardContext = createContext({});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case BOARD_CONSTANTS.ON_DROP:\n      const droppedTask = action.payload;\n      const updatedTasks = state.map((task) => {\n        if (task.id === droppedTask.id) {\n          return droppedTask;\n        }\n        return task;\n      });\n      return updatedTasks;\n    case BOARD_CONSTANTS.LOAD_DATA:\n      return action.payload;\n    case BOARD_CONSTANTS.ADD_NEW:\n      return [...state, action.payload];\n    case BOARD_CONSTANTS.ON_DELETE:\n      return state.filter((task) => task.id !== action.payload);\n    default:\n      return state;\n  }\n}\nfunction Board(props) {\n  // if(props.taskData==null)return (<div>Empty!</div>);\n  // const req = {\"id\":\"1\",\"task\":taskData}\n  // const myJSON = JSON.stringify(req);\n  // taskData = {}\n  // useEffect(() => {\n  //   axios.get('https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod').then(res => {\n  //     console.log(res);\n  //   })\n  //   .then(error => console.log(error));\n  // }, []);\n  \n  // useEffect(() =>{\n  //   axios({\n  //     method: \"post\",\n  //     url: \"https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod/board\",\n  //     data: myJSON,\n  //     headers: { \"Content-Type\": \"application/json\"},\n  //   })\n  //     .then(function (response) {\n  //       console.log(response);\n  //     })\n  //     .catch(function (response) {\n  //       console.log(response);\n  //     });\n  // },[]);\n\n  // useEffect(() => {\n    \n  // }, [taskState, stages]);\n\n  // const response = fetch(\"https://zblm46wzp8.execute-api.us-east-1.amazonaws.com/Prod/board\", {\n  //   method: \"POST\",\n  //   headers: {\n  //   'Content-Type' : 'application/json'\n  //   },\n  //   body: myJSON\n  //   })\n  //   if (response.ok){\n  //     console.log(response)\n  //     console.log(\"it worked\")\n  //   }\n  //   else{\n  //     console.log(response)\n  //   }\n\n  const [taskState, dispatch] = useReducer(reducer, props.data.task);\n  const initialData = props.data;\n  const [stages, setStage] = useState(stagesData);\n\n  useEffect(() => {\n    dispatch({ type: BOARD_CONSTANTS.LOAD_DATA, payload: taskState });\n  }, [taskState, stages]);\n\n  const onDragStartHandler = (\n    event,\n    taskId,\n    stageId\n  ) => {\n    var data = {\n      taskId: taskId,\n      stageId: stageId,\n    };\n    event.dataTransfer.setData(BOARD_CONSTANTS.TEXT_PLAIN, JSON.stringify(data));\n    event.dataTransfer.effectAllowed = BOARD_CONSTANTS.MOVE;\n  };\n\n  const onTaskContainerDragStartHandler = (event,laneId) => {\n    let fromBox = JSON.stringify({ laneId: laneId });\n    event.dataTransfer.setData(BOARD_CONSTANTS.LANE_ID, fromBox);\n  };\n  const onTaskContainerDragOverHandler = (event) => {\n    if (event.dataTransfer && event.dataTransfer.types[0] === BOARD_CONSTANTS.TEXT_PLAIN) {\n      event.preventDefault();\n    }\n  };\n\n  const onTaskContainerDropHandler = (event, droppedLaneId) => {};\n  \n\n  const onDragOverHandler = (event) => {\n    if (event.dataTransfer && event.dataTransfer.types[0] === BOARD_CONSTANTS.TEXT_PLAIN) {\n      event.preventDefault();//To allow a drop, we must prevent the default handling of the element\n    }\n    // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.description && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onDropHandler = (event, droppedStageId) => {\n    let droppedData = event.dataTransfer.getData(BOARD_CONSTANTS.TEXT_PLAIN);\n    droppedData = JSON.parse(droppedData);\n    const filterTask = taskState.filter((x) => x.id === droppedData.taskId);\n    filterTask[0].stage = droppedStageId;\n    dispatch({ type: BOARD_CONSTANTS.ON_DROP, payload: filterTask[0] });\n    // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onAddingNewTask = (dataFromChild) => {\n    dataFromChild.stage = 1;\n    dataFromChild.id = taskState.length + 1;\n    dispatch({ type: BOARD_CONSTANTS.ADD_NEW, payload: dataFromChild });\n    // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onUpdatingTask = (dataFromChild) => {\n    console.log(dataFromChild)\n    dispatch({ type: BOARD_CONSTANTS.ON_DROP, payload: dataFromChild });\n    // const isSameUser = (initialTaskState, taskState) => initialTaskState.id === taskState.id && initialTaskState.title === taskState.title && initialTaskState.description === taskState.stage && initialTaskState.stage === taskState.stage;\n    // setIsNew(isSameUser);\n  };\n\n  const onDeletingTask = (taskId) => {\n    dispatch({ type: BOARD_CONSTANTS.ON_DELETE, payload: taskId });\n  };\n\n  const onSubmitTask = (tasks) =>{\n    tasks.task = taskState\n    const response = fetch(BOARD_CONSTANTS.SUBMIT_URL, {\n      method: BOARD_CONSTANTS.POST,\n      headers: {\n      'Content-Type' : BOARD_CONSTANTS.APPLICATION_JSON\n      },\n      body: JSON.stringify(tasks)\n      })\n  };\n\n  const ContextData = {\n    taskState,\n    onDragStartHandler,\n    onDragOverHandler,\n    onDropHandler,\n    onUpdatingTask,\n    onDeletingTask,\n    onTaskContainerDragStartHandler,\n    onTaskContainerDropHandler,\n    onTaskContainerDragOverHandler,\n    onSubmitTask\n  };\n\n  return (\n    <div className=\"container-fluid pt-3\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <NewTask addNewTask={onAddingNewTask}/>\n          <Button className=\"btn-custom\" onClick={()=>onSubmitTask(initialData)}>\n            Submit\n          </Button>\n        </div>\n      </div>\n      <hr />\n      <div className=\"row\">\n        <div className=\"col-12\">\n            <BoardContext.Provider value={ContextData}>\n                <BoardLanes stages={stages}></BoardLanes>\n            </BoardContext.Provider>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}